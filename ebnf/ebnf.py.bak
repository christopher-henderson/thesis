class EBNF:

    digit excluding zero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
    digit                = "0" | digit excluding zero ;
    natural number = digit excluding zero, { digit } ;
    integer = "0" | [ "-" ], natural number ;
    add = integer, "+", integer ;

    def __init__(self, tokens):
        self.rule = 0
        self.tokens = tokens

    def parse(self):
        pass

    def __accept__(self, solution):
        return len(self.tokens) == 0

    def __reject__(self, solution, candidate):
        return self.rules[self.rule].match(candidate) is None.

    def __accept__(self, solution):
        return True

    def __child__(self):
        self.token = self.tokens.pop(0)
        self.rule = 0

    def __sibling__(self):
        if self.rule >= len(self.rules):
            return None
        self.rule += 1
        return self

    def __append__(self, solution, candidate):
        solution.append(tuple([]))
        solution.append(candidate)

    def __remove__(self, solution):
        self.tokens.append(solution.pop())